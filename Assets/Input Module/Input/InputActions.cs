//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input Module/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""KeyboardMouse"",
            ""id"": ""ae107bf7-670e-4d28-8d3f-ea00f51a16e0"",
            ""actions"": [
                {
                    ""name"": ""Evasion"",
                    ""type"": ""Button"",
                    ""id"": ""148de1a0-6f3c-4022-9cb8-7c7d2ead0d11"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""8b9b78cc-cc07-43ac-8abe-0f21b413ac9c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch Gun"",
                    ""type"": ""Button"",
                    ""id"": ""5ef5c24c-ec70-4716-bfaf-fc549c435092"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch Ammo Type"",
                    ""type"": ""Button"",
                    ""id"": ""7347b9e9-23cd-4591-aab4-fc84d6485c83"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""XMovement"",
                    ""type"": ""Button"",
                    ""id"": ""bb64d6ae-5489-43cc-a3b8-3986d8f3ab6d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""YMovement"",
                    ""type"": ""Button"",
                    ""id"": ""3b821628-e8db-46a5-a9a6-b52fafe50bab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e1ad1c27-411f-4202-82c7-774e123a20b8"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""Evasion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""16cd6352-9f4c-4433-954f-9455f760e3e5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb642a36-8b21-4293-a489-b22ee7c0c4f3"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch Gun"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04875bd3-35c1-410c-85a3-cf6d35e6a09b"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch Ammo Type"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Horiontal"",
                    ""id"": ""bc7c3a8a-abe2-42df-9009-5287a0391204"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""XMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""bcbb42c6-ae38-43c4-88ff-1af357c2ff9e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""XMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""56dd3b31-599c-4270-9109-e1f8781473e8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""XMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Vecrtical"",
                    ""id"": ""cbd987d2-500d-415c-a33e-a67db462337d"",
                    ""path"": ""1DAxis(whichSideWins=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""e4898963-31ce-470a-ae6b-b678f2e87d28"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""6cc46e0f-9ecb-4cf8-a0f6-baec436b8303"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""New control scheme"",
            ""bindingGroup"": ""New control scheme"",
            ""devices"": []
        }
    ]
}");
        // KeyboardMouse
        m_KeyboardMouse = asset.FindActionMap("KeyboardMouse", throwIfNotFound: true);
        m_KeyboardMouse_Evasion = m_KeyboardMouse.FindAction("Evasion", throwIfNotFound: true);
        m_KeyboardMouse_Attack = m_KeyboardMouse.FindAction("Attack", throwIfNotFound: true);
        m_KeyboardMouse_SwitchGun = m_KeyboardMouse.FindAction("Switch Gun", throwIfNotFound: true);
        m_KeyboardMouse_SwitchAmmoType = m_KeyboardMouse.FindAction("Switch Ammo Type", throwIfNotFound: true);
        m_KeyboardMouse_XMovement = m_KeyboardMouse.FindAction("XMovement", throwIfNotFound: true);
        m_KeyboardMouse_YMovement = m_KeyboardMouse.FindAction("YMovement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // KeyboardMouse
    private readonly InputActionMap m_KeyboardMouse;
    private List<IKeyboardMouseActions> m_KeyboardMouseActionsCallbackInterfaces = new List<IKeyboardMouseActions>();
    private readonly InputAction m_KeyboardMouse_Evasion;
    private readonly InputAction m_KeyboardMouse_Attack;
    private readonly InputAction m_KeyboardMouse_SwitchGun;
    private readonly InputAction m_KeyboardMouse_SwitchAmmoType;
    private readonly InputAction m_KeyboardMouse_XMovement;
    private readonly InputAction m_KeyboardMouse_YMovement;
    public struct KeyboardMouseActions
    {
        private @InputActions m_Wrapper;
        public KeyboardMouseActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Evasion => m_Wrapper.m_KeyboardMouse_Evasion;
        public InputAction @Attack => m_Wrapper.m_KeyboardMouse_Attack;
        public InputAction @SwitchGun => m_Wrapper.m_KeyboardMouse_SwitchGun;
        public InputAction @SwitchAmmoType => m_Wrapper.m_KeyboardMouse_SwitchAmmoType;
        public InputAction @XMovement => m_Wrapper.m_KeyboardMouse_XMovement;
        public InputAction @YMovement => m_Wrapper.m_KeyboardMouse_YMovement;
        public InputActionMap Get() { return m_Wrapper.m_KeyboardMouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardMouseActions set) { return set.Get(); }
        public void AddCallbacks(IKeyboardMouseActions instance)
        {
            if (instance == null || m_Wrapper.m_KeyboardMouseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeyboardMouseActionsCallbackInterfaces.Add(instance);
            @Evasion.started += instance.OnEvasion;
            @Evasion.performed += instance.OnEvasion;
            @Evasion.canceled += instance.OnEvasion;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @SwitchGun.started += instance.OnSwitchGun;
            @SwitchGun.performed += instance.OnSwitchGun;
            @SwitchGun.canceled += instance.OnSwitchGun;
            @SwitchAmmoType.started += instance.OnSwitchAmmoType;
            @SwitchAmmoType.performed += instance.OnSwitchAmmoType;
            @SwitchAmmoType.canceled += instance.OnSwitchAmmoType;
            @XMovement.started += instance.OnXMovement;
            @XMovement.performed += instance.OnXMovement;
            @XMovement.canceled += instance.OnXMovement;
            @YMovement.started += instance.OnYMovement;
            @YMovement.performed += instance.OnYMovement;
            @YMovement.canceled += instance.OnYMovement;
        }

        private void UnregisterCallbacks(IKeyboardMouseActions instance)
        {
            @Evasion.started -= instance.OnEvasion;
            @Evasion.performed -= instance.OnEvasion;
            @Evasion.canceled -= instance.OnEvasion;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @SwitchGun.started -= instance.OnSwitchGun;
            @SwitchGun.performed -= instance.OnSwitchGun;
            @SwitchGun.canceled -= instance.OnSwitchGun;
            @SwitchAmmoType.started -= instance.OnSwitchAmmoType;
            @SwitchAmmoType.performed -= instance.OnSwitchAmmoType;
            @SwitchAmmoType.canceled -= instance.OnSwitchAmmoType;
            @XMovement.started -= instance.OnXMovement;
            @XMovement.performed -= instance.OnXMovement;
            @XMovement.canceled -= instance.OnXMovement;
            @YMovement.started -= instance.OnYMovement;
            @YMovement.performed -= instance.OnYMovement;
            @YMovement.canceled -= instance.OnYMovement;
        }

        public void RemoveCallbacks(IKeyboardMouseActions instance)
        {
            if (m_Wrapper.m_KeyboardMouseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeyboardMouseActions instance)
        {
            foreach (var item in m_Wrapper.m_KeyboardMouseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeyboardMouseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeyboardMouseActions @KeyboardMouse => new KeyboardMouseActions(this);
    private int m_NewcontrolschemeSchemeIndex = -1;
    public InputControlScheme NewcontrolschemeScheme
    {
        get
        {
            if (m_NewcontrolschemeSchemeIndex == -1) m_NewcontrolschemeSchemeIndex = asset.FindControlSchemeIndex("New control scheme");
            return asset.controlSchemes[m_NewcontrolschemeSchemeIndex];
        }
    }
    public interface IKeyboardMouseActions
    {
        void OnEvasion(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnSwitchGun(InputAction.CallbackContext context);
        void OnSwitchAmmoType(InputAction.CallbackContext context);
        void OnXMovement(InputAction.CallbackContext context);
        void OnYMovement(InputAction.CallbackContext context);
    }
}
